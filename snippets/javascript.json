{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New Function": {
		"prefix": "function",
		"body": [
			"function ${1:newFunction}(${2:args}){",
			    "\t$3",
			"}"
	 	],
	 	"description": "Create new javascript function"
    },
    "New Class": {
        "prefix": "class",
		"body": [
			"function ${1:newClass}(${2:args}){",
                "\tself.${3:attribute1} = $4",
                "\tself.${5:attribute2} = $6",
                "\tself.${7:attribute3} = $8",
                "\tthis.${9:newFunction} = (${10:args}) => {",
			"}"
	 	],
	 	"description": "Create new javascript class"
    },
	"New XMLHttp GET Request": {
		"prefix": "xhttpGET",
		"body": [
			"var xhttp = new XMLHttpRequest();",
			"xhttp.onreadystatechange = () => {",
			    "\tif (this.readyState === 4 && this.status === 200) {",
                    "\t\tconsole.log(this.responseTest);$1",
                "\t}",
			"}",
			"xhr.open(\"GET\", url);",
			"xhr.send();"
	 	],
	 	"description": "Create new xhttp GET request object"
	},

	"New XMLHttp POST Request": {
		"prefix": "xhttpPOST",
		"body": [
			"var xhttp = new XMLHttpRequest();",
			"xhttp.onreadystatechange = () => {",
			    "\tif (this.readyState === 4 && this.status === 200) {",
                    "\t\tcallback(JSON.parse(this.responseText));//IMPORTANT json string must be convertd to js object",
                "\t}",
			"}",
			"xhr.open(\"POST\", url);",
			"xhr.setRequestHeader(\"Content-type\", \"application/json\");",
			"xhr.send(JSON.stringify(data));//IMPORTANT json data must be stringified"
	 	],
		 "description": "Create new xhttp POST request object"
	},

	"New XMLHttp PUT Request": {
		"prefix": "xhttpPUT",
		"body": [
			"var xhttp = new XMLHttpRequest();",
			"xhttp.onreadystatechange = () => {",
			    "\tif (this.readyState === 4 && this.status === 200) {",
                    "\t\tcallback(JSON.parse(this.responseText));//IMPORTANT json string must be convertd to js object",
                "\t}",
			"}",
			"xhr.open(\"PUT\", url);",
			"xhr.setRequestHeader(\"Content-type\", \"application/json\");",
			"xhr.send(JSON.stringify(data));//IMPORTANT json data must be stringified"
	 	],
		 "description": "Create new xhttp PUT request object"
	},

	"New XMLHttp DELETE Request": {
		"prefix": "xhttpDELETE",
		"body": [
			"var xhttp = new XMLHttpRequest();",
			"xhttp.onreadystatechange = () => {",
			    "\tif (this.readyState === 4 && this.status === 200) {",
                    "\t\tcallback(JSON.parse(this.responseText));$1",
                "\t}",
			"}",
			"xhr.open(\"DELETE\", url);",
			"xhr.send();"
	 	],
	 	"description": "Create new xhttp DELETE request object"
	},
}